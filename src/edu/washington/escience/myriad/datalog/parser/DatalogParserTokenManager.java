/* Generated By:JavaCC: Do not edit this line. DatalogParserTokenManager.java */
package edu.washington.escience.myriad.datalog.parser;

/** Token Manager. */
public class DatalogParserTokenManager implements DatalogParserConstants {

  /** Debug output. */
  public java.io.PrintStream debugStream = System.out;

  /** Set debug output. */
  public void setDebugStream(java.io.PrintStream ds) {
    debugStream = ds;
  }

  private int jjMoveStringLiteralDfa0_0() {
    switch (curChar) {
      case 9:
        jjmatchedKind = 2;
        return jjMoveNfa_0(0, 0);
      case 10:
        jjmatchedKind = 3;
        return jjMoveNfa_0(0, 0);
      case 32:
        jjmatchedKind = 1;
        return jjMoveNfa_0(0, 0);
      case 33:
        return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 40:
        jjmatchedKind = 27;
        return jjMoveNfa_0(0, 0);
      case 41:
        jjmatchedKind = 28;
        return jjMoveNfa_0(0, 0);
      case 44:
        jjmatchedKind = 32;
        return jjMoveNfa_0(0, 0);
      case 46:
        jjmatchedKind = 33;
        return jjMoveNfa_0(0, 0);
      case 58:
        return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 61:
        jjmatchedKind = 34;
        return jjMoveNfa_0(0, 0);
      case 65:
        return jjMoveStringLiteralDfa1_0(0x80L);
      case 66:
        return jjMoveStringLiteralDfa1_0(0x40L);
      case 67:
        return jjMoveStringLiteralDfa1_0(0x1000L);
      case 70:
        return jjMoveStringLiteralDfa1_0(0x8000L);
      case 73:
        return jjMoveStringLiteralDfa1_0(0x100L);
      case 76:
        return jjMoveStringLiteralDfa1_0(0x200L);
      case 77:
        return jjMoveStringLiteralDfa1_0(0x6000L);
      case 83:
        return jjMoveStringLiteralDfa1_0(0x400L);
      case 85:
        return jjMoveStringLiteralDfa1_0(0x800L);
      case 91:
        jjmatchedKind = 29;
        return jjMoveNfa_0(0, 0);
      case 93:
        jjmatchedKind = 30;
        return jjMoveNfa_0(0, 0);
      case 97:
        return jjMoveStringLiteralDfa1_0(0x80L);
      case 98:
        return jjMoveStringLiteralDfa1_0(0x40L);
      case 99:
        return jjMoveStringLiteralDfa1_0(0x1000L);
      case 102:
        return jjMoveStringLiteralDfa1_0(0x8000L);
      case 105:
        return jjMoveStringLiteralDfa1_0(0x100L);
      case 108:
        return jjMoveStringLiteralDfa1_0(0x200L);
      case 109:
        return jjMoveStringLiteralDfa1_0(0x6000L);
      case 115:
        return jjMoveStringLiteralDfa1_0(0x400L);
      case 117:
        return jjMoveStringLiteralDfa1_0(0x800L);
      default:
        return jjMoveNfa_0(0, 0);
    }
  }

  private int jjMoveStringLiteralDfa1_0(long active0) {
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 0);
    }
    switch (curChar) {
      case 45:
        if ((active0 & 0x4000000L) != 0L) {
          jjmatchedKind = 26;
          jjmatchedPos = 1;
        }
        break;
      case 61:
        if ((active0 & 0x800000000L) != 0L) {
          jjmatchedKind = 35;
          jjmatchedPos = 1;
        }
        break;
      case 65:
        return jjMoveStringLiteralDfa2_0(active0, 0x2040L);
      case 73:
        return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 78:
        return jjMoveStringLiteralDfa2_0(active0, 0x980L);
      case 79:
        return jjMoveStringLiteralDfa2_0(active0, 0x1200L);
      case 84:
        return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 85:
        return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 97:
        return jjMoveStringLiteralDfa2_0(active0, 0x2040L);
      case 105:
        return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 110:
        return jjMoveStringLiteralDfa2_0(active0, 0x980L);
      case 111:
        return jjMoveStringLiteralDfa2_0(active0, 0x1200L);
      case 116:
        return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 117:
        return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 1);
  }

  private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 1);
    }
    switch (curChar) {
      case 67:
        return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 75:
        return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 78:
        if ((active0 & 0x4000L) != 0L) {
          jjmatchedKind = 14;
          jjmatchedPos = 2;
        } else if ((active0 & 0x8000L) != 0L) {
          jjmatchedKind = 15;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 82:
        return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 83:
        if ((active0 & 0x80L) != 0L) {
          jjmatchedKind = 7;
          jjmatchedPos = 2;
        }
        break;
      case 84:
        if ((active0 & 0x100L) != 0L) {
          jjmatchedKind = 8;
          jjmatchedPos = 2;
        }
        break;
      case 85:
        return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 88:
        if ((active0 & 0x2000L) != 0L) {
          jjmatchedKind = 13;
          jjmatchedPos = 2;
        }
        break;
      case 99:
        return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 107:
        return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 110:
        if ((active0 & 0x4000L) != 0L) {
          jjmatchedKind = 14;
          jjmatchedPos = 2;
        } else if ((active0 & 0x8000L) != 0L) {
          jjmatchedKind = 15;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 114:
        return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 115:
        if ((active0 & 0x80L) != 0L) {
          jjmatchedKind = 7;
          jjmatchedPos = 2;
        }
        break;
      case 116:
        if ((active0 & 0x100L) != 0L) {
          jjmatchedKind = 8;
          jjmatchedPos = 2;
        }
        break;
      case 117:
        return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 120:
        if ((active0 & 0x2000L) != 0L) {
          jjmatchedKind = 13;
          jjmatchedPos = 2;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(0, 2);
  }

  private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 2);
    }
    switch (curChar) {
      case 71:
        if ((active0 & 0x200L) != 0L) {
          jjmatchedKind = 9;
          jjmatchedPos = 3;
        }
        break;
      case 73:
        return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 75:
        return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 78:
        return jjMoveStringLiteralDfa4_0(active0, 0x1800L);
      case 103:
        if ((active0 & 0x200L) != 0L) {
          jjmatchedKind = 9;
          jjmatchedPos = 3;
        }
        break;
      case 105:
        return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 107:
        return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 110:
        return jjMoveStringLiteralDfa4_0(active0, 0x1800L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 3);
  }

  private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 3);
    }
    switch (curChar) {
      case 69:
        return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 78:
        return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 79:
        return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 84:
        if ((active0 & 0x1000L) != 0L) {
          jjmatchedKind = 12;
          jjmatchedPos = 4;
        }
        break;
      case 101:
        return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 110:
        return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 111:
        return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 116:
        if ((active0 & 0x1000L) != 0L) {
          jjmatchedKind = 12;
          jjmatchedPos = 4;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(0, 4);
  }

  private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 4);
    }
    switch (curChar) {
      case 71:
        if ((active0 & 0x400L) != 0L) {
          jjmatchedKind = 10;
          jjmatchedPos = 5;
        }
        break;
      case 78:
        return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 87:
        return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 103:
        if ((active0 & 0x400L) != 0L) {
          jjmatchedKind = 10;
          jjmatchedPos = 5;
        }
        break;
      case 110:
        return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 119:
        return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 5);
  }

  private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 5);
    }
    switch (curChar) {
      case 68:
        if ((active0 & 0x40L) != 0L) {
          jjmatchedKind = 6;
          jjmatchedPos = 6;
        }
        break;
      case 78:
        if ((active0 & 0x800L) != 0L) {
          jjmatchedKind = 11;
          jjmatchedPos = 6;
        }
        break;
      case 100:
        if ((active0 & 0x40L) != 0L) {
          jjmatchedKind = 6;
          jjmatchedPos = 6;
        }
        break;
      case 110:
        if ((active0 & 0x800L) != 0L) {
          jjmatchedKind = 11;
          jjmatchedPos = 6;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(0, 6);
  }

  static final long[] jjbitVec0 =
      { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
  static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

  private int jjMoveNfa_0(int startState, int curPos) {
    int strKind = jjmatchedKind;
    int strPos = jjmatchedPos;
    int seenUpto;
    input_stream.backup(seenUpto = curPos + 1);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      throw new Error("Internal Error");
    }
    curPos = 0;
    int startsAt = 0;
    jjnewStateCnt = 24;
    int i = 1;
    jjstateSet[0] = startState;
    int kind = 0x7fffffff;
    for (;;) {
      if (++jjround == 0x7fffffff)
        ReInitRounds();
      if (curChar < 64) {
        long l = 1L << curChar;
        do {
          switch (jjstateSet[--i]) {
            case 0:
              if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 21)
                  kind = 21;
                jjCheckNAddStates(0, 2);
              } else if (curChar == 40)
                jjCheckNAddStates(3, 5);
              else if (curChar == 34)
                jjCheckNAddTwoStates(12, 13);
              else if (curChar == 39)
                jjCheckNAddTwoStates(9, 10);
              else if (curChar == 35) {
                if (kind > 5)
                  kind = 5;
                jjCheckNAddTwoStates(1, 2);
              } else if (curChar == 63)
                jjstateSet[jjnewStateCnt++] = 6;
              break;
            case 1:
              if ((0xfffffffffffffbffL & l) == 0L)
                break;
              if (kind > 5)
                kind = 5;
              jjCheckNAddTwoStates(1, 2);
              break;
            case 2:
              if (curChar == 10 && kind > 5)
                kind = 5;
              break;
            case 4:
              if ((0x3ff400000000000L & l) == 0L)
                break;
              if (kind > 22)
                kind = 22;
              jjstateSet[jjnewStateCnt++] = 4;
              break;
            case 5:
              if (curChar == 63)
                jjstateSet[jjnewStateCnt++] = 6;
              break;
            case 7:
              if ((0x3ff400000000000L & l) == 0L)
                break;
              if (kind > 23)
                kind = 23;
              jjstateSet[jjnewStateCnt++] = 7;
              break;
            case 8:
              if (curChar == 39)
                jjCheckNAddTwoStates(9, 10);
              break;
            case 9:
              if ((0xffffff7ffffffbffL & l) != 0L)
                jjCheckNAddTwoStates(9, 10);
              break;
            case 10:
              if (curChar == 39 && kind > 24)
                kind = 24;
              break;
            case 11:
              if (curChar == 34)
                jjCheckNAddTwoStates(12, 13);
              break;
            case 12:
              if ((0xfffffffbfffffbffL & l) != 0L)
                jjCheckNAddTwoStates(12, 13);
              break;
            case 13:
              if (curChar == 34 && kind > 25)
                kind = 25;
              break;
            case 14:
              if (curChar == 40)
                jjCheckNAddStates(3, 5);
              break;
            case 15:
              if (curChar == 35)
                jjCheckNAddStates(6, 10);
              break;
            case 16:
              if ((0xfffffffffffffbffL & l) != 0L)
                jjCheckNAddStates(6, 10);
              break;
            case 17:
              if (curChar == 10)
                jjCheckNAddStates(3, 5);
              break;
            case 18:
              if ((0x100000600L & l) != 0L)
                jjCheckNAddStates(3, 5);
              break;
            case 19:
              if (curChar == 41 && kind > 31)
                kind = 31;
              break;
            case 20:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 21)
                kind = 21;
              jjCheckNAddStates(0, 2);
              break;
            case 21:
              if ((0x3ff000000000000L & l) != 0L)
                jjCheckNAddTwoStates(21, 22);
              break;
            case 23:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 21)
                kind = 21;
              jjCheckNAdd(23);
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 0:
              if ((0x7fffffe07fffffeL & l) == 0L)
                break;
              if (kind > 22)
                kind = 22;
              jjCheckNAdd(4);
              break;
            case 1:
              if (kind > 5)
                kind = 5;
              jjAddStates(11, 12);
              break;
            case 4:
              if ((0x7fffffe87fffffeL & l) == 0L)
                break;
              if (kind > 22)
                kind = 22;
              jjCheckNAdd(4);
              break;
            case 6:
              if ((0x7fffffe07fffffeL & l) == 0L)
                break;
              if (kind > 23)
                kind = 23;
              jjCheckNAdd(7);
              break;
            case 7:
              if ((0x7fffffe87fffffeL & l) == 0L)
                break;
              if (kind > 23)
                kind = 23;
              jjCheckNAdd(7);
              break;
            case 9:
              if ((0xffffffffefffffffL & l) != 0L)
                jjAddStates(13, 14);
              break;
            case 12:
              if ((0xffffffffefffffffL & l) != 0L)
                jjAddStates(15, 16);
              break;
            case 16:
              jjAddStates(6, 10);
              break;
            case 22:
              if ((0x100000001000L & l) != 0L && kind > 20)
                kind = 20;
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else {
        int hiByte = (curChar >> 8);
        int i1 = hiByte >> 6;
        long l1 = 1L << (hiByte & 077);
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 1:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                break;
              if (kind > 5)
                kind = 5;
              jjAddStates(11, 12);
              break;
            case 9:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                jjAddStates(13, 14);
              break;
            case 12:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                jjAddStates(15, 16);
              break;
            case 16:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                jjAddStates(6, 10);
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
        break;
      try {
        curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
        break;
      }
    }
    if (jjmatchedPos > strPos)
      return curPos;

    int toRet = Math.max(curPos, seenUpto);

    if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0;)
        try {
          curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
          throw new Error("Internal Error : Please send a bug report.");
        }

    if (jjmatchedPos < strPos) {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
    } else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

    return toRet;
  }

  static final int[] jjnextStates = { 21, 22, 23, 15, 18, 19, 15, 16, 17, 18, 19, 1, 2, 9, 10, 12, 13, };

  private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
    switch (hiByte) {
      case 0:
        return ((jjbitVec2[i2] & l2) != 0L);
      default:
        if ((jjbitVec0[i1] & l1) != 0L)
          return true;
        return false;
    }
  }

  /** Token literal values. */
  public static final String[] jjstrLiteralImages = {
      "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, "\72\55", "\50", "\51", "\133", "\135", null, "\54", "\56", "\75",
      "\41\75", };

  /** Lexer state names. */
  public static final String[] lexStateNames = { "DEFAULT", };
  static final long[] jjtoToken = { 0xffff0ffc1L, };
  static final long[] jjtoSkip = { 0x2eL, };
  static final long[] jjtoSpecial = { 0x20L, };
  protected JavaCharStream input_stream;
  private final int[] jjrounds = new int[24];
  private final int[] jjstateSet = new int[48];
  protected char curChar;

  /** Constructor. */
  public DatalogParserTokenManager(JavaCharStream stream) {
    if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
    input_stream = stream;
  }

  /** Constructor. */
  public DatalogParserTokenManager(JavaCharStream stream, int lexState) {
    this(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream) {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = 24; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState) {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
          TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

  protected Token jjFillToken() {
    final Token t;
    final String curTokenImage;
    final int beginLine;
    final int endLine;
    final int beginColumn;
    final int endColumn;
    String im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im == null) ? input_stream.GetImage() : im;
    beginLine = input_stream.getBeginLine();
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
    t = Token.newToken(jjmatchedKind, curTokenImage);

    t.beginLine = beginLine;
    t.endLine = endLine;
    t.beginColumn = beginColumn;
    t.endColumn = endColumn;

    return t;
  }

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  /** Get the next Token. */
  public Token getNextToken() {
    Token specialToken = null;
    Token matchedToken;
    int curPos = 0;

    EOFLoop : for (;;) {
      try {
        curChar = input_stream.BeginToken();
      } catch (java.io.IOException e) {
        jjmatchedKind = 0;
        matchedToken = jjFillToken();
        matchedToken.specialToken = specialToken;
        return matchedToken;
      }

      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      curPos = jjMoveStringLiteralDfa0_0();
      if (jjmatchedKind != 0x7fffffff) {
        if (jjmatchedPos + 1 < curPos)
          input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
          matchedToken = jjFillToken();
          matchedToken.specialToken = specialToken;
          return matchedToken;
        } else {
          if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
            matchedToken = jjFillToken();
            if (specialToken == null)
              specialToken = matchedToken;
            else {
              matchedToken.specialToken = specialToken;
              specialToken = (specialToken.next = matchedToken);
            }
          }
          continue EOFLoop;
        }
      }
      int error_line = input_stream.getEndLine();
      int error_column = input_stream.getEndColumn();
      String error_after = null;
      boolean EOFSeen = false;
      try {
        input_stream.readChar();
        input_stream.backup(1);
      } catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
          error_line++;
          error_column = 0;
        } else
          error_column++;
      }
      if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
      }
      throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
          TokenMgrError.LEXICAL_ERROR);
    }
  }

  private void jjCheckNAdd(int state) {
    if (jjrounds[state] != jjround) {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  private void jjAddStates(int start, int end) {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }

  private void jjCheckNAddTwoStates(int state1, int state2) {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  private void jjCheckNAddStates(int start, int end) {
    do {
      jjCheckNAdd(jjnextStates[start]);
    } while (start++ != end);
  }

}
