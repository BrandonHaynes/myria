/* Generated By:JavaCC: Do not edit this line. DatalogParser.java */
package edu.washington.escience.myriad.datalog.parser;

import java.util.ArrayList;
import java.util.List;

import edu.washington.escience.myriad.datalog.syntax.DatalogAnswer;
import edu.washington.escience.myriad.datalog.syntax.DatalogAtom;
import edu.washington.escience.myriad.datalog.syntax.DatalogBackend;
import edu.washington.escience.myriad.datalog.syntax.DatalogBody;
import edu.washington.escience.myriad.datalog.syntax.DatalogOperation;
import edu.washington.escience.myriad.datalog.syntax.DatalogParamIntegerConstant;
import edu.washington.escience.myriad.datalog.syntax.DatalogParamLongConstant;
import edu.washington.escience.myriad.datalog.syntax.DatalogParamStringConstant;
import edu.washington.escience.myriad.datalog.syntax.DatalogParamValue;
import edu.washington.escience.myriad.datalog.syntax.DatalogParamVariable;
import edu.washington.escience.myriad.datalog.syntax.DatalogProgram;
import edu.washington.escience.myriad.datalog.syntax.DatalogRule;
import edu.washington.escience.myriad.datalog.syntax.DatalogRuleSet;
import edu.washington.escience.myriad.datalog.syntax.DatalogType;
import edu.washington.escience.myriad.datalog.syntax.DatalogTypeInteger;
import edu.washington.escience.myriad.datalog.syntax.DatalogTypeLong;
import edu.washington.escience.myriad.datalog.syntax.DatalogTypeString;
import edu.washington.escience.myriad.datalog.syntax.DatalogTypeUnknown;

public class DatalogParser implements DatalogParserConstants {

  final public DatalogProgram Program() throws ParseException {
    DatalogProgram pgm;
    pgm = new DatalogProgram();
    label_1 : while (true) {
      Backend(pgm);
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case BACKEND:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
      }
    }
    ProgramRules(pgm);
    ProgramAnswer(pgm);
    jj_consume_token(0);
    return pgm;
  }

  final public void Backend(DatalogProgram pgm) throws ParseException {
    String model;
    List<DatalogType> args;
    DatalogBackend backend;
    String fn, fn2;
    jj_consume_token(BACKEND);
    model = Predicate();
    args = BackendTypeList();
    backend = new DatalogBackend(model, args);
    fn = String();
    fn2 = fn.substring(1, fn.length() - 1);
    backend.setFilename(fn2);
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
    }
    pgm.addBackend(backend);
  }

  final public void ProgramRules(DatalogProgram pgm) throws ParseException {
    DatalogRuleSet rules;
    rules = RuleSet();
    pgm.setRuleSet(rules);
  }

  final public void ProgramAnswer(DatalogProgram pgm) throws ParseException {
    DatalogAnswer ans;
    ans = Answer();
    pgm.setAnswer(ans);
  }

  final public DatalogRuleSet RuleSet() throws ParseException {
    DatalogRuleSet rules;
    DatalogRule r;
    rules = new DatalogRuleSet();
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case NIL:
        jj_consume_token(NIL);
        break;
      case PREDICATE:
        r = IndividualRule();
        rules.addRule(r);
        label_2 : while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PREDICATE:
              ;
              break;
            default:
              jj_la1[2] = jj_gen;
              break label_2;
          }
          r = IndividualRule();
          rules.addRule(r);
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    return rules;
  }

  final public DatalogRule IndividualRule() throws ParseException {
    DatalogRule r;
    DatalogAtom hd;
    DatalogBody body;
    hd = Atom();
    jj_consume_token(RULEDEF);
    body = RuleBody();
    r = new DatalogRule(hd, body);
    return r;
  }

  final public DatalogBody RuleBody() throws ParseException {
    DatalogBody body;
    DatalogAtom a;
    body = new DatalogBody();
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case NIL:
        jj_consume_token(NIL);
        break;
      case PREDICATE:
        a = Atom();
        body.addAtom(a);
        label_3 : while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PREDICATE:
            case COMMA:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_3;
          }
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              break;
            default:
              jj_la1[5] = jj_gen;
              ;
          }
          a = Atom();
          body.addAtom(a);
        }
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    return body;
  }

  final public DatalogAtom Atom() throws ParseException {
    DatalogAtom a;
    String p;
    List<DatalogParamValue> args;
    p = Predicate();
    args = ArgList();
    a = new DatalogAtom(p, args);
    return a;
  }

  final public DatalogAnswer Answer() throws ParseException {
    DatalogAnswer answer;
    DatalogAtom a;
    jj_consume_token(ANSWER);
    a = Atom();
    answer = new DatalogAnswer(a);
    return answer;
  }

  final public String Predicate() throws ParseException {
    Token tkn;
    String str;
    tkn = jj_consume_token(PREDICATE);
    str = tkn.image;
    return str;
  }

  final public String String() throws ParseException {
    Token tkn;
    String str;
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case SINGLE_STRING:
        tkn = jj_consume_token(SINGLE_STRING);
        str = tkn.image;
        break;
      case DOUBLE_STRING:
        tkn = jj_consume_token(DOUBLE_STRING);
        str = tkn.image;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    return str;
  }

  final public int Integer() throws ParseException {
    Token tkn;
    int intNum;
    tkn = jj_consume_token(INTEGER);
    intNum = Integer.parseInt(tkn.image);
    return intNum;
  }

  final public long Long() throws ParseException {
    Token tkn;
    long longNum;
    String substr;
    tkn = jj_consume_token(LONG);
    substr = tkn.image.substring(0, tkn.image.length() - 1);
    longNum = Long.parseLong(substr);
    return longNum;
  }

  final public DatalogParamValue AtomParam() throws ParseException {
    String str, str2;
    List<DatalogParamValue> args;
    int intNum;
    long longNum;
    DatalogParamValue dpv;
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case PREDICATE:
        str = Predicate();
        dpv = new DatalogParamVariable(str);
        break;
      case SINGLE_STRING:
      case DOUBLE_STRING:
        str = String();
        str2 = str.substring(1, str.length() - 1);
        dpv = new DatalogParamStringConstant(str2);
        break;
      case LONG:
        longNum = Long();
        dpv = new DatalogParamLongConstant(longNum);
        break;
      case INTEGER:
        intNum = Integer();
        dpv = new DatalogParamIntegerConstant(intNum);
        break;
      case COUNT:
        jj_consume_token(COUNT);
        args = ArgInList();
        dpv = new DatalogOperation("count", args);
        break;
      case MAX:
        jj_consume_token(MAX);
        args = ArgInList();
        dpv = new DatalogOperation("max", args);
        break;
      case MIN:
        jj_consume_token(MIN);
        args = ArgInList();
        dpv = new DatalogOperation("min", args);
        break;
      case FUN:
        jj_consume_token(FUN);
        args = ArgInList();
        dpv = new DatalogOperation("fun", args);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    return dpv;
  }

  final public List<DatalogParamValue> ArgInList() throws ParseException {
    DatalogParamValue field;
    List<DatalogParamValue> args = new ArrayList<DatalogParamValue>();
    jj_consume_token(LBRACE);
    field = AtomParam();
    args.add(field);
    label_4 : while (true) {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
      }
      jj_consume_token(COMMA);
      field = AtomParam();
      args.add(field);
    }
    jj_consume_token(RBRACE);
    return args;
  }

  final public List<DatalogParamValue> ArgList() throws ParseException {
    DatalogParamValue field;
    List<DatalogParamValue> args = new ArrayList<DatalogParamValue>();
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case NIL:
        jj_consume_token(NIL);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        field = AtomParam();
        args.add(field);
        label_5 : while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_5;
          }
          jj_consume_token(COMMA);
          field = AtomParam();
          args.add(field);
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    return args;
  }

  final public List<DatalogType> BackendTypeList() throws ParseException {
    DatalogType field;
    List<DatalogType> args = new ArrayList<DatalogType>();
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case NIL:
        jj_consume_token(NIL);
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        /*
         * field = Predicate() { args.add(field); } ( <COMMA> field = Predicate() { args.add(field); } ) *
         */
        field = BackendType();
        args.add(field);
        label_6 : while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_6;
          }
          jj_consume_token(COMMA);
          field = BackendType();
          args.add(field);
        }
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    return args;
  }

  final public DatalogType BackendType() throws ParseException {
    DatalogType dt;
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case INTEGER_TYPE:
        jj_consume_token(INTEGER_TYPE);
        dt = DatalogTypeInteger.getInstance();
        break;
      case LONG_TYPE:
        jj_consume_token(LONG_TYPE);
        dt = DatalogTypeLong.getInstance();
        break;
      case STRING_TYPE:
        jj_consume_token(STRING_TYPE);
        dt = DatalogTypeString.getInstance();
        break;
      case UNKNOWN_TYPE:
        jj_consume_token(UNKNOWN_TYPE);
        dt = DatalogTypeUnknown.getInstance();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    return dt;
  }

  /** Generated Token Manager. */
  public DatalogParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
    jj_la1_init_0();
    jj_la1_init_1();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 =
        new int[] {
            0x40, 0x0, 0x400000, 0x80400000, 0x400000, 0x0, 0x80400000, 0x3000000, 0x370f000, 0x0, 0x0, 0x88000000,
            0x0, 0xa0000000, 0xf00, };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 = new int[] { 0x0, 0x2, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, };
  }

  /** Constructor with InputStream. */
  public DatalogParser(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public DatalogParser(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new DatalogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Constructor. */
  public DatalogParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new DatalogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DatalogParser(DatalogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DatalogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  /** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private final java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
